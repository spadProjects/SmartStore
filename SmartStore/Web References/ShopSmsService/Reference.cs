//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SmartStore.ShopSmsService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SendReceiveSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParentModel))]
    public partial class SendReceive : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback VipSendMessageWithBachKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithBachKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithLineNumberAndBatchKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageToOneCustomerClubOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithLineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNewSchedulSendSms_DailyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBulkMessageToCustomersClubOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBulkMessageWithLineNumberAndBatchKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBulkMessageWithLineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback VipSendMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNewSchedulSendSms_WeeklyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReceivedMessageByLastMessageIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReceivedMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSentMessageStatusByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVipSentMessageStatusByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVipSentMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSentMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSMSLinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefualtLineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback VipSendMessageWithLineNumberAndBatchKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback VipSendMessageWithLineNumberOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SendReceive() {
            this.Url = global::SmartStore.Properties.Settings.Default.SmartStore_ShopSmsService_SendReceive;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event VipSendMessageWithBachKeyCompletedEventHandler VipSendMessageWithBachKeyCompleted;
        
        /// <remarks/>
        public event SendMessageWithBachKeyCompletedEventHandler SendMessageWithBachKeyCompleted;
        
        /// <remarks/>
        public event SendMessageWithLineNumberAndBatchKeyCompletedEventHandler SendMessageWithLineNumberAndBatchKeyCompleted;
        
        /// <remarks/>
        public event SendMessageToOneCustomerClubCompletedEventHandler SendMessageToOneCustomerClubCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event SendMessageWithLineNumberCompletedEventHandler SendMessageWithLineNumberCompleted;
        
        /// <remarks/>
        public event SaveNewSchedulSendSms_DailyCompletedEventHandler SaveNewSchedulSendSms_DailyCompleted;
        
        /// <remarks/>
        public event SendBulkMessageToCustomersClubCompletedEventHandler SendBulkMessageToCustomersClubCompleted;
        
        /// <remarks/>
        public event SendBulkMessageWithLineNumberAndBatchKeyCompletedEventHandler SendBulkMessageWithLineNumberAndBatchKeyCompleted;
        
        /// <remarks/>
        public event SendBulkMessageWithLineNumberCompletedEventHandler SendBulkMessageWithLineNumberCompleted;
        
        /// <remarks/>
        public event VipSendMessagesCompletedEventHandler VipSendMessagesCompleted;
        
        /// <remarks/>
        public event SaveNewSchedulSendSms_WeeklyCompletedEventHandler SaveNewSchedulSendSms_WeeklyCompleted;
        
        /// <remarks/>
        public event GetReceivedMessageByLastMessageIDCompletedEventHandler GetReceivedMessageByLastMessageIDCompleted;
        
        /// <remarks/>
        public event GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventHandler GetReceivedMessageByLastMessageIDAndLineNumberCompleted;
        
        /// <remarks/>
        public event GetReceivedMessagesCompletedEventHandler GetReceivedMessagesCompleted;
        
        /// <remarks/>
        public event GetSentMessageStatusByIDCompletedEventHandler GetSentMessageStatusByIDCompleted;
        
        /// <remarks/>
        public event GetVipSentMessageStatusByIDCompletedEventHandler GetVipSentMessageStatusByIDCompleted;
        
        /// <remarks/>
        public event GetVipSentMessagesCompletedEventHandler GetVipSentMessagesCompleted;
        
        /// <remarks/>
        public event GetSentMessagesCompletedEventHandler GetSentMessagesCompleted;
        
        /// <remarks/>
        public event GetUserCreditCompletedEventHandler GetUserCreditCompleted;
        
        /// <remarks/>
        public event GetSMSLinesCompletedEventHandler GetSMSLinesCompleted;
        
        /// <remarks/>
        public event GetDefualtLineNumberCompletedEventHandler GetDefualtLineNumberCompleted;
        
        /// <remarks/>
        public event VipSendMessageWithLineNumberAndBatchKeyCompletedEventHandler VipSendMessageWithLineNumberAndBatchKeyCompleted;
        
        /// <remarks/>
        public event VipSendMessageWithLineNumberCompletedEventHandler VipSendMessageWithLineNumberCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VipSendMessageWithBachKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] VipSendMessageWithBachKey(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("VipSendMessageWithBachKey", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumber,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void VipSendMessageWithBachKeyAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, System.Guid batchKey, string message) {
            this.VipSendMessageWithBachKeyAsync(userName, password, webServiceSMSSendDetails, lineNumber, batchKey, message, null);
        }
        
        /// <remarks/>
        public void VipSendMessageWithBachKeyAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, System.Guid batchKey, string message, object userState) {
            if ((this.VipSendMessageWithBachKeyOperationCompleted == null)) {
                this.VipSendMessageWithBachKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVipSendMessageWithBachKeyOperationCompleted);
            }
            this.InvokeAsync("VipSendMessageWithBachKey", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumber,
                        batchKey,
                        message}, this.VipSendMessageWithBachKeyOperationCompleted, userState);
        }
        
        private void OnVipSendMessageWithBachKeyOperationCompleted(object arg) {
            if ((this.VipSendMessageWithBachKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VipSendMessageWithBachKeyCompleted(this, new VipSendMessageWithBachKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageWithBachKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageWithBachKey(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("SendMessageWithBachKey", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumberID,
                        sendDateTime,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithBachKeyAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message) {
            this.SendMessageWithBachKeyAsync(userName, password, webServiceSMSSendDetails, lineNumberID, sendDateTime, batchKey, message, null);
        }
        
        /// <remarks/>
        public void SendMessageWithBachKeyAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message, object userState) {
            if ((this.SendMessageWithBachKeyOperationCompleted == null)) {
                this.SendMessageWithBachKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithBachKeyOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithBachKey", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumberID,
                        sendDateTime,
                        batchKey,
                        message}, this.SendMessageWithBachKeyOperationCompleted, userState);
        }
        
        private void OnSendMessageWithBachKeyOperationCompleted(object arg) {
            if ((this.SendMessageWithBachKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithBachKeyCompleted(this, new SendMessageWithBachKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageWithLineNumberAndBatchKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageWithLineNumberAndBatchKey(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("SendMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message) {
            this.SendMessageWithLineNumberAndBatchKeyAsync(userName, password, mobileNos, messages, lineNumber, sendDateTime, batchKey, message, null);
        }
        
        /// <remarks/>
        public void SendMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message, object userState) {
            if ((this.SendMessageWithLineNumberAndBatchKeyOperationCompleted == null)) {
                this.SendMessageWithLineNumberAndBatchKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithLineNumberAndBatchKeyOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        batchKey,
                        message}, this.SendMessageWithLineNumberAndBatchKeyOperationCompleted, userState);
        }
        
        private void OnSendMessageWithLineNumberAndBatchKeyOperationCompleted(object arg) {
            if ((this.SendMessageWithLineNumberAndBatchKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithLineNumberAndBatchKeyCompleted(this, new SendMessageWithLineNumberAndBatchKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageToOneCustomerClub", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendMessageToOneCustomerClub(string userName, string password, string messageBody, string mobile, ref string message) {
            object[] results = this.Invoke("SendMessageToOneCustomerClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        mobile,
                        message});
            message = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageToOneCustomerClubAsync(string userName, string password, string messageBody, string mobile, string message) {
            this.SendMessageToOneCustomerClubAsync(userName, password, messageBody, mobile, message, null);
        }
        
        /// <remarks/>
        public void SendMessageToOneCustomerClubAsync(string userName, string password, string messageBody, string mobile, string message, object userState) {
            if ((this.SendMessageToOneCustomerClubOperationCompleted == null)) {
                this.SendMessageToOneCustomerClubOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageToOneCustomerClubOperationCompleted);
            }
            this.InvokeAsync("SendMessageToOneCustomerClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        mobile,
                        message}, this.SendMessageToOneCustomerClubOperationCompleted, userState);
        }
        
        private void OnSendMessageToOneCustomerClubOperationCompleted(object arg) {
            if ((this.SendMessageToOneCustomerClubCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageToOneCustomerClubCompleted(this, new SendMessageToOneCustomerClubCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessage(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref string message) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumberID,
                        sendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, System.Nullable<System.DateTime> sendDateTime, string message) {
            this.SendMessageAsync(userName, password, webServiceSMSSendDetails, lineNumberID, sendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, System.Nullable<System.DateTime> sendDateTime, string message, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumberID,
                        sendDateTime,
                        message}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageWithLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageWithLineNumber(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref string message) {
            object[] results = this.Invoke("SendMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, string message) {
            this.SendMessageWithLineNumberAsync(userName, password, mobileNos, messages, lineNumber, sendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, string message, object userState) {
            if ((this.SendMessageWithLineNumberOperationCompleted == null)) {
                this.SendMessageWithLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithLineNumberOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        message}, this.SendMessageWithLineNumberOperationCompleted, userState);
        }
        
        private void OnSendMessageWithLineNumberOperationCompleted(object arg) {
            if ((this.SendMessageWithLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithLineNumberCompleted(this, new SendMessageWithLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveNewSchedulSendSms_Daily", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SaveNewSchedulSendSms_Daily(string userName, string password, ScheduleSend_Daily dailyScheduleSend, ref string message) {
            object[] results = this.Invoke("SaveNewSchedulSendSms_Daily", new object[] {
                        userName,
                        password,
                        dailyScheduleSend,
                        message});
            message = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_DailyAsync(string userName, string password, ScheduleSend_Daily dailyScheduleSend, string message) {
            this.SaveNewSchedulSendSms_DailyAsync(userName, password, dailyScheduleSend, message, null);
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_DailyAsync(string userName, string password, ScheduleSend_Daily dailyScheduleSend, string message, object userState) {
            if ((this.SaveNewSchedulSendSms_DailyOperationCompleted == null)) {
                this.SaveNewSchedulSendSms_DailyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNewSchedulSendSms_DailyOperationCompleted);
            }
            this.InvokeAsync("SaveNewSchedulSendSms_Daily", new object[] {
                        userName,
                        password,
                        dailyScheduleSend,
                        message}, this.SaveNewSchedulSendSms_DailyOperationCompleted, userState);
        }
        
        private void OnSaveNewSchedulSendSms_DailyOperationCompleted(object arg) {
            if ((this.SaveNewSchedulSendSms_DailyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNewSchedulSendSms_DailyCompleted(this, new SaveNewSchedulSendSms_DailyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBulkMessageToCustomersClub", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendBulkMessageToCustomersClub(string userName, string password, string messageBody, long[] ListOfmobile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> SendDateTime, ref string message) {
            object[] results = this.Invoke("SendBulkMessageToCustomersClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        ListOfmobile,
                        SendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendBulkMessageToCustomersClubAsync(string userName, string password, string messageBody, long[] ListOfmobile, System.Nullable<System.DateTime> SendDateTime, string message) {
            this.SendBulkMessageToCustomersClubAsync(userName, password, messageBody, ListOfmobile, SendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendBulkMessageToCustomersClubAsync(string userName, string password, string messageBody, long[] ListOfmobile, System.Nullable<System.DateTime> SendDateTime, string message, object userState) {
            if ((this.SendBulkMessageToCustomersClubOperationCompleted == null)) {
                this.SendBulkMessageToCustomersClubOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBulkMessageToCustomersClubOperationCompleted);
            }
            this.InvokeAsync("SendBulkMessageToCustomersClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        ListOfmobile,
                        SendDateTime,
                        message}, this.SendBulkMessageToCustomersClubOperationCompleted, userState);
        }
        
        private void OnSendBulkMessageToCustomersClubOperationCompleted(object arg) {
            if ((this.SendBulkMessageToCustomersClubCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBulkMessageToCustomersClubCompleted(this, new SendBulkMessageToCustomersClubCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBulkMessageWithLineNumberAndBatchKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendBulkMessageWithLineNumberAndBatchKey(string userName, string password, long[] mobileNos, string messages, string lineNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("SendBulkMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendBulkMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message) {
            this.SendBulkMessageWithLineNumberAndBatchKeyAsync(userName, password, mobileNos, messages, lineNumber, sendDateTime, batchKey, message, null);
        }
        
        /// <remarks/>
        public void SendBulkMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message, object userState) {
            if ((this.SendBulkMessageWithLineNumberAndBatchKeyOperationCompleted == null)) {
                this.SendBulkMessageWithLineNumberAndBatchKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBulkMessageWithLineNumberAndBatchKeyOperationCompleted);
            }
            this.InvokeAsync("SendBulkMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        batchKey,
                        message}, this.SendBulkMessageWithLineNumberAndBatchKeyOperationCompleted, userState);
        }
        
        private void OnSendBulkMessageWithLineNumberAndBatchKeyOperationCompleted(object arg) {
            if ((this.SendBulkMessageWithLineNumberAndBatchKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBulkMessageWithLineNumberAndBatchKeyCompleted(this, new SendBulkMessageWithLineNumberAndBatchKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBulkMessageWithLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendBulkMessageWithLineNumber(string userName, string password, long[] mobileNos, string messages, string lineNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref string message) {
            object[] results = this.Invoke("SendBulkMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendBulkMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, string message) {
            this.SendBulkMessageWithLineNumberAsync(userName, password, mobileNos, messages, lineNumber, sendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendBulkMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, string message, object userState) {
            if ((this.SendBulkMessageWithLineNumberOperationCompleted == null)) {
                this.SendBulkMessageWithLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBulkMessageWithLineNumberOperationCompleted);
            }
            this.InvokeAsync("SendBulkMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        message}, this.SendBulkMessageWithLineNumberOperationCompleted, userState);
        }
        
        private void OnSendBulkMessageWithLineNumberOperationCompleted(object arg) {
            if ((this.SendBulkMessageWithLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBulkMessageWithLineNumberCompleted(this, new SendBulkMessageWithLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VipSendMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] VipSendMessages(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, ref string message) {
            object[] results = this.Invoke("VipSendMessages", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumber,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void VipSendMessagesAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, string message) {
            this.VipSendMessagesAsync(userName, password, webServiceSMSSendDetails, lineNumber, message, null);
        }
        
        /// <remarks/>
        public void VipSendMessagesAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, string message, object userState) {
            if ((this.VipSendMessagesOperationCompleted == null)) {
                this.VipSendMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVipSendMessagesOperationCompleted);
            }
            this.InvokeAsync("VipSendMessages", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumber,
                        message}, this.VipSendMessagesOperationCompleted, userState);
        }
        
        private void OnVipSendMessagesOperationCompleted(object arg) {
            if ((this.VipSendMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VipSendMessagesCompleted(this, new VipSendMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveNewSchedulSendSms_Weekly", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SaveNewSchedulSendSms_Weekly(string userName, string password, ScheduleSend_Weekly weeklyScheduleSend, ref string message) {
            object[] results = this.Invoke("SaveNewSchedulSendSms_Weekly", new object[] {
                        userName,
                        password,
                        weeklyScheduleSend,
                        message});
            message = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_WeeklyAsync(string userName, string password, ScheduleSend_Weekly weeklyScheduleSend, string message) {
            this.SaveNewSchedulSendSms_WeeklyAsync(userName, password, weeklyScheduleSend, message, null);
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_WeeklyAsync(string userName, string password, ScheduleSend_Weekly weeklyScheduleSend, string message, object userState) {
            if ((this.SaveNewSchedulSendSms_WeeklyOperationCompleted == null)) {
                this.SaveNewSchedulSendSms_WeeklyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNewSchedulSendSms_WeeklyOperationCompleted);
            }
            this.InvokeAsync("SaveNewSchedulSendSms_Weekly", new object[] {
                        userName,
                        password,
                        weeklyScheduleSend,
                        message}, this.SaveNewSchedulSendSms_WeeklyOperationCompleted, userState);
        }
        
        private void OnSaveNewSchedulSendSms_WeeklyOperationCompleted(object arg) {
            if ((this.SaveNewSchedulSendSms_WeeklyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNewSchedulSendSms_WeeklyCompleted(this, new SaveNewSchedulSendSms_WeeklyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReceivedMessageByLastMessageID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReceivedMessage[] GetReceivedMessageByLastMessageID(string userName, string password, long lastMessageID, ref string message) {
            object[] results = this.Invoke("GetReceivedMessageByLastMessageID", new object[] {
                        userName,
                        password,
                        lastMessageID,
                        message});
            message = ((string)(results[1]));
            return ((ReceivedMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReceivedMessageByLastMessageIDAsync(string userName, string password, long lastMessageID, string message) {
            this.GetReceivedMessageByLastMessageIDAsync(userName, password, lastMessageID, message, null);
        }
        
        /// <remarks/>
        public void GetReceivedMessageByLastMessageIDAsync(string userName, string password, long lastMessageID, string message, object userState) {
            if ((this.GetReceivedMessageByLastMessageIDOperationCompleted == null)) {
                this.GetReceivedMessageByLastMessageIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReceivedMessageByLastMessageIDOperationCompleted);
            }
            this.InvokeAsync("GetReceivedMessageByLastMessageID", new object[] {
                        userName,
                        password,
                        lastMessageID,
                        message}, this.GetReceivedMessageByLastMessageIDOperationCompleted, userState);
        }
        
        private void OnGetReceivedMessageByLastMessageIDOperationCompleted(object arg) {
            if ((this.GetReceivedMessageByLastMessageIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReceivedMessageByLastMessageIDCompleted(this, new GetReceivedMessageByLastMessageIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReceivedMessageByLastMessageIDAndLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReceivedMessage[] GetReceivedMessageByLastMessageIDAndLineNumber(string userName, string password, long lastMessageID, long lineNumber, int countOfMessages, ref string message) {
            object[] results = this.Invoke("GetReceivedMessageByLastMessageIDAndLineNumber", new object[] {
                        userName,
                        password,
                        lastMessageID,
                        lineNumber,
                        countOfMessages,
                        message});
            message = ((string)(results[1]));
            return ((ReceivedMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReceivedMessageByLastMessageIDAndLineNumberAsync(string userName, string password, long lastMessageID, long lineNumber, int countOfMessages, string message) {
            this.GetReceivedMessageByLastMessageIDAndLineNumberAsync(userName, password, lastMessageID, lineNumber, countOfMessages, message, null);
        }
        
        /// <remarks/>
        public void GetReceivedMessageByLastMessageIDAndLineNumberAsync(string userName, string password, long lastMessageID, long lineNumber, int countOfMessages, string message, object userState) {
            if ((this.GetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted == null)) {
                this.GetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted);
            }
            this.InvokeAsync("GetReceivedMessageByLastMessageIDAndLineNumber", new object[] {
                        userName,
                        password,
                        lastMessageID,
                        lineNumber,
                        countOfMessages,
                        message}, this.GetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted, userState);
        }
        
        private void OnGetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted(object arg) {
            if ((this.GetReceivedMessageByLastMessageIDAndLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReceivedMessageByLastMessageIDAndLineNumberCompleted(this, new GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReceivedMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReceivedMessage[] GetReceivedMessages(string userName, string password, System.DateTime fromDate, System.DateTime toDate, ref string message) {
            object[] results = this.Invoke("GetReceivedMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message});
            message = ((string)(results[1]));
            return ((ReceivedMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReceivedMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message) {
            this.GetReceivedMessagesAsync(userName, password, fromDate, toDate, message, null);
        }
        
        /// <remarks/>
        public void GetReceivedMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message, object userState) {
            if ((this.GetReceivedMessagesOperationCompleted == null)) {
                this.GetReceivedMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReceivedMessagesOperationCompleted);
            }
            this.InvokeAsync("GetReceivedMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message}, this.GetReceivedMessagesOperationCompleted, userState);
        }
        
        private void OnGetReceivedMessagesOperationCompleted(object arg) {
            if ((this.GetReceivedMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReceivedMessagesCompleted(this, new GetReceivedMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSentMessageStatusByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentSmsDetails GetSentMessageStatusByID(string userName, string password, long messageID, ref string message) {
            object[] results = this.Invoke("GetSentMessageStatusByID", new object[] {
                        userName,
                        password,
                        messageID,
                        message});
            message = ((string)(results[1]));
            return ((SentSmsDetails)(results[0]));
        }
        
        /// <remarks/>
        public void GetSentMessageStatusByIDAsync(string userName, string password, long messageID, string message) {
            this.GetSentMessageStatusByIDAsync(userName, password, messageID, message, null);
        }
        
        /// <remarks/>
        public void GetSentMessageStatusByIDAsync(string userName, string password, long messageID, string message, object userState) {
            if ((this.GetSentMessageStatusByIDOperationCompleted == null)) {
                this.GetSentMessageStatusByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSentMessageStatusByIDOperationCompleted);
            }
            this.InvokeAsync("GetSentMessageStatusByID", new object[] {
                        userName,
                        password,
                        messageID,
                        message}, this.GetSentMessageStatusByIDOperationCompleted, userState);
        }
        
        private void OnGetSentMessageStatusByIDOperationCompleted(object arg) {
            if ((this.GetSentMessageStatusByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSentMessageStatusByIDCompleted(this, new GetSentMessageStatusByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVipSentMessageStatusByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentSmsDetails GetVipSentMessageStatusByID(string userName, string password, long messageID, ref string message) {
            object[] results = this.Invoke("GetVipSentMessageStatusByID", new object[] {
                        userName,
                        password,
                        messageID,
                        message});
            message = ((string)(results[1]));
            return ((SentSmsDetails)(results[0]));
        }
        
        /// <remarks/>
        public void GetVipSentMessageStatusByIDAsync(string userName, string password, long messageID, string message) {
            this.GetVipSentMessageStatusByIDAsync(userName, password, messageID, message, null);
        }
        
        /// <remarks/>
        public void GetVipSentMessageStatusByIDAsync(string userName, string password, long messageID, string message, object userState) {
            if ((this.GetVipSentMessageStatusByIDOperationCompleted == null)) {
                this.GetVipSentMessageStatusByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVipSentMessageStatusByIDOperationCompleted);
            }
            this.InvokeAsync("GetVipSentMessageStatusByID", new object[] {
                        userName,
                        password,
                        messageID,
                        message}, this.GetVipSentMessageStatusByIDOperationCompleted, userState);
        }
        
        private void OnGetVipSentMessageStatusByIDOperationCompleted(object arg) {
            if ((this.GetVipSentMessageStatusByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVipSentMessageStatusByIDCompleted(this, new GetVipSentMessageStatusByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVipSentMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentMessage[] GetVipSentMessages(string userName, string password, System.DateTime fromDate, System.DateTime toDate, ref string message) {
            object[] results = this.Invoke("GetVipSentMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message});
            message = ((string)(results[1]));
            return ((SentMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVipSentMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message) {
            this.GetVipSentMessagesAsync(userName, password, fromDate, toDate, message, null);
        }
        
        /// <remarks/>
        public void GetVipSentMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message, object userState) {
            if ((this.GetVipSentMessagesOperationCompleted == null)) {
                this.GetVipSentMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVipSentMessagesOperationCompleted);
            }
            this.InvokeAsync("GetVipSentMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message}, this.GetVipSentMessagesOperationCompleted, userState);
        }
        
        private void OnGetVipSentMessagesOperationCompleted(object arg) {
            if ((this.GetVipSentMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVipSentMessagesCompleted(this, new GetVipSentMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSentMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentMessage[] GetSentMessages(string userName, string password, System.DateTime fromDate, System.DateTime toDate, ref string message) {
            object[] results = this.Invoke("GetSentMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message});
            message = ((string)(results[1]));
            return ((SentMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSentMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message) {
            this.GetSentMessagesAsync(userName, password, fromDate, toDate, message, null);
        }
        
        /// <remarks/>
        public void GetSentMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message, object userState) {
            if ((this.GetSentMessagesOperationCompleted == null)) {
                this.GetSentMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSentMessagesOperationCompleted);
            }
            this.InvokeAsync("GetSentMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message}, this.GetSentMessagesOperationCompleted, userState);
        }
        
        private void OnGetSentMessagesOperationCompleted(object arg) {
            if ((this.GetSentMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSentMessagesCompleted(this, new GetSentMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserCredit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> GetUserCredit(string userName, string password, ref string message) {
            object[] results = this.Invoke("GetUserCredit", new object[] {
                        userName,
                        password,
                        message});
            message = ((string)(results[1]));
            return ((System.Nullable<double>)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCreditAsync(string userName, string password, string message) {
            this.GetUserCreditAsync(userName, password, message, null);
        }
        
        /// <remarks/>
        public void GetUserCreditAsync(string userName, string password, string message, object userState) {
            if ((this.GetUserCreditOperationCompleted == null)) {
                this.GetUserCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCreditOperationCompleted);
            }
            this.InvokeAsync("GetUserCredit", new object[] {
                        userName,
                        password,
                        message}, this.GetUserCreditOperationCompleted, userState);
        }
        
        private void OnGetUserCreditOperationCompleted(object arg) {
            if ((this.GetUserCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCreditCompleted(this, new GetUserCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSMSLines", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SMSLineNumber[] GetSMSLines(string userName, string password, ref string message) {
            object[] results = this.Invoke("GetSMSLines", new object[] {
                        userName,
                        password,
                        message});
            message = ((string)(results[1]));
            return ((SMSLineNumber[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSMSLinesAsync(string userName, string password, string message) {
            this.GetSMSLinesAsync(userName, password, message, null);
        }
        
        /// <remarks/>
        public void GetSMSLinesAsync(string userName, string password, string message, object userState) {
            if ((this.GetSMSLinesOperationCompleted == null)) {
                this.GetSMSLinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSMSLinesOperationCompleted);
            }
            this.InvokeAsync("GetSMSLines", new object[] {
                        userName,
                        password,
                        message}, this.GetSMSLinesOperationCompleted, userState);
        }
        
        private void OnGetSMSLinesOperationCompleted(object arg) {
            if ((this.GetSMSLinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSMSLinesCompleted(this, new GetSMSLinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDefualtLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> GetDefualtLineNumber(string userName, string password, ref string message) {
            object[] results = this.Invoke("GetDefualtLineNumber", new object[] {
                        userName,
                        password,
                        message});
            message = ((string)(results[1]));
            return ((System.Nullable<int>)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefualtLineNumberAsync(string userName, string password, string message) {
            this.GetDefualtLineNumberAsync(userName, password, message, null);
        }
        
        /// <remarks/>
        public void GetDefualtLineNumberAsync(string userName, string password, string message, object userState) {
            if ((this.GetDefualtLineNumberOperationCompleted == null)) {
                this.GetDefualtLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefualtLineNumberOperationCompleted);
            }
            this.InvokeAsync("GetDefualtLineNumber", new object[] {
                        userName,
                        password,
                        message}, this.GetDefualtLineNumberOperationCompleted, userState);
        }
        
        private void OnGetDefualtLineNumberOperationCompleted(object arg) {
            if ((this.GetDefualtLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefualtLineNumberCompleted(this, new GetDefualtLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VipSendMessageWithLineNumberAndBatchKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] VipSendMessageWithLineNumberAndBatchKey(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("VipSendMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void VipSendMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Guid batchKey, string message) {
            this.VipSendMessageWithLineNumberAndBatchKeyAsync(userName, password, mobileNos, messages, lineNumber, batchKey, message, null);
        }
        
        /// <remarks/>
        public void VipSendMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Guid batchKey, string message, object userState) {
            if ((this.VipSendMessageWithLineNumberAndBatchKeyOperationCompleted == null)) {
                this.VipSendMessageWithLineNumberAndBatchKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVipSendMessageWithLineNumberAndBatchKeyOperationCompleted);
            }
            this.InvokeAsync("VipSendMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        batchKey,
                        message}, this.VipSendMessageWithLineNumberAndBatchKeyOperationCompleted, userState);
        }
        
        private void OnVipSendMessageWithLineNumberAndBatchKeyOperationCompleted(object arg) {
            if ((this.VipSendMessageWithLineNumberAndBatchKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VipSendMessageWithLineNumberAndBatchKeyCompleted(this, new VipSendMessageWithLineNumberAndBatchKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VipSendMessageWithLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] VipSendMessageWithLineNumber(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, ref string message) {
            object[] results = this.Invoke("VipSendMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void VipSendMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, string message) {
            this.VipSendMessageWithLineNumberAsync(userName, password, mobileNos, messages, lineNumber, message, null);
        }
        
        /// <remarks/>
        public void VipSendMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, string message, object userState) {
            if ((this.VipSendMessageWithLineNumberOperationCompleted == null)) {
                this.VipSendMessageWithLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVipSendMessageWithLineNumberOperationCompleted);
            }
            this.InvokeAsync("VipSendMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        message}, this.VipSendMessageWithLineNumberOperationCompleted, userState);
        }
        
        private void OnVipSendMessageWithLineNumberOperationCompleted(object arg) {
            if ((this.VipSendMessageWithLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VipSendMessageWithLineNumberCompleted(this, new VipSendMessageWithLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class WebServiceSmsSend {
        
        private bool isFlashField;
        
        private string messageBodyField;
        
        private long mobileNoField;
        
        /// <remarks/>
        public bool IsFlash {
            get {
                return this.isFlashField;
            }
            set {
                this.isFlashField = value;
            }
        }
        
        /// <remarks/>
        public string MessageBody {
            get {
                return this.messageBodyField;
            }
            set {
                this.messageBodyField = value;
            }
        }
        
        /// <remarks/>
        public long MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SMSLineNumber {
        
        private int idField;
        
        private long lineNumberField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public long LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SentSmsDetails {
        
        private long idField;
        
        private string mobileNoField;
        
        private string sendDateTimeField;
        
        private string deliveryStatusField;
        
        private string sMSMessageBodyField;
        
        private bool sendIsErronousField;
        
        private string deliveryStatusFetchErrorField;
        
        private bool needsReCheckField;
        
        private System.Nullable<int> deliveryStateIDField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
        
        /// <remarks/>
        public string SendDateTime {
            get {
                return this.sendDateTimeField;
            }
            set {
                this.sendDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string SMSMessageBody {
            get {
                return this.sMSMessageBodyField;
            }
            set {
                this.sMSMessageBodyField = value;
            }
        }
        
        /// <remarks/>
        public bool SendIsErronous {
            get {
                return this.sendIsErronousField;
            }
            set {
                this.sendIsErronousField = value;
            }
        }
        
        /// <remarks/>
        public string DeliveryStatusFetchError {
            get {
                return this.deliveryStatusFetchErrorField;
            }
            set {
                this.deliveryStatusFetchErrorField = value;
            }
        }
        
        /// <remarks/>
        public bool NeedsReCheck {
            get {
                return this.needsReCheckField;
            }
            set {
                this.needsReCheckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> DeliveryStateID {
            get {
                return this.deliveryStateIDField;
            }
            set {
                this.deliveryStateIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ReceivedMessage {
        
        private long idField;
        
        private string lineNumberField;
        
        private string sMSMessageBodyField;
        
        private string mobileNoField;
        
        private string receiveDateTimeField;
        
        private System.DateTime latinReceiveDateTimeField;
        
        private string typeOfMessageField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SMSMessageBody {
            get {
                return this.sMSMessageBodyField;
            }
            set {
                this.sMSMessageBodyField = value;
            }
        }
        
        /// <remarks/>
        public string MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiveDateTime {
            get {
                return this.receiveDateTimeField;
            }
            set {
                this.receiveDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LatinReceiveDateTime {
            get {
                return this.latinReceiveDateTimeField;
            }
            set {
                this.latinReceiveDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string TypeOfMessage {
            get {
                return this.typeOfMessageField;
            }
            set {
                this.typeOfMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TimeSpan {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SentMessage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParentScheduleSend))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Weekly))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Daily))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ParentModel {
        
        private bool isCheckedField;
        
        /// <remarks/>
        public bool IsChecked {
            get {
                return this.isCheckedField;
            }
            set {
                this.isCheckedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SentMessage : ParentModel {
        
        private long idField;
        
        private string lineNumberField;
        
        private string sMSMessageBodyField;
        
        private string mobileNoField;
        
        private System.Nullable<System.DateTime> sendDateTimeLatinField;
        
        private string toBeSentAtField;
        
        private string nativeDeliveryStatusField;
        
        private string typeOfMessageField;
        
        private string persianSendDateTimeField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SMSMessageBody {
            get {
                return this.sMSMessageBodyField;
            }
            set {
                this.sMSMessageBodyField = value;
            }
        }
        
        /// <remarks/>
        public string MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> SendDateTimeLatin {
            get {
                return this.sendDateTimeLatinField;
            }
            set {
                this.sendDateTimeLatinField = value;
            }
        }
        
        /// <remarks/>
        public string ToBeSentAt {
            get {
                return this.toBeSentAtField;
            }
            set {
                this.toBeSentAtField = value;
            }
        }
        
        /// <remarks/>
        public string NativeDeliveryStatus {
            get {
                return this.nativeDeliveryStatusField;
            }
            set {
                this.nativeDeliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string TypeOfMessage {
            get {
                return this.typeOfMessageField;
            }
            set {
                this.typeOfMessageField = value;
            }
        }
        
        /// <remarks/>
        public string PersianSendDateTime {
            get {
                return this.persianSendDateTimeField;
            }
            set {
                this.persianSendDateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Weekly))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Daily))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ParentScheduleSend : ParentModel {
        
        private int smsLineIDField;
        
        private long[] mobileNumbersField;
        
        private SMSSentTypes smsSendTypeField;
        
        private System.DateTime timeField;
        
        private bool isFlashField;
        
        private System.DateTime toDateField;
        
        private System.DateTime fromDateField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private System.DateTime nextTimeToSendField;
        
        private string cronPatternField;
        
        private string titleField;
        
        private int scheduleSendV3_Status_IdField;
        
        private string statusNameField;
        
        private string messageBodyField;
        
        private long idField;
        
        private string sendTypeField;
        
        private TimeSpan fromDate_TimeField;
        
        private TimeSpan toDate_TimeField;
        
        private string fromDate_DateField;
        
        private string toDate_DateField;
        
        /// <remarks/>
        public int SmsLineID {
            get {
                return this.smsLineIDField;
            }
            set {
                this.smsLineIDField = value;
            }
        }
        
        /// <remarks/>
        public long[] MobileNumbers {
            get {
                return this.mobileNumbersField;
            }
            set {
                this.mobileNumbersField = value;
            }
        }
        
        /// <remarks/>
        public SMSSentTypes SmsSendType {
            get {
                return this.smsSendTypeField;
            }
            set {
                this.smsSendTypeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsFlash {
            get {
                return this.isFlashField;
            }
            set {
                this.isFlashField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ToDate {
            get {
                return this.toDateField;
            }
            set {
                this.toDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FromDate {
            get {
                return this.fromDateField;
            }
            set {
                this.fromDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NextTimeToSend {
            get {
                return this.nextTimeToSendField;
            }
            set {
                this.nextTimeToSendField = value;
            }
        }
        
        /// <remarks/>
        public string CronPattern {
            get {
                return this.cronPatternField;
            }
            set {
                this.cronPatternField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int ScheduleSendV3_Status_Id {
            get {
                return this.scheduleSendV3_Status_IdField;
            }
            set {
                this.scheduleSendV3_Status_IdField = value;
            }
        }
        
        /// <remarks/>
        public string StatusName {
            get {
                return this.statusNameField;
            }
            set {
                this.statusNameField = value;
            }
        }
        
        /// <remarks/>
        public string MessageBody {
            get {
                return this.messageBodyField;
            }
            set {
                this.messageBodyField = value;
            }
        }
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string SendType {
            get {
                return this.sendTypeField;
            }
            set {
                this.sendTypeField = value;
            }
        }
        
        /// <remarks/>
        public TimeSpan FromDate_Time {
            get {
                return this.fromDate_TimeField;
            }
            set {
                this.fromDate_TimeField = value;
            }
        }
        
        /// <remarks/>
        public TimeSpan ToDate_Time {
            get {
                return this.toDate_TimeField;
            }
            set {
                this.toDate_TimeField = value;
            }
        }
        
        /// <remarks/>
        public string FromDate_Date {
            get {
                return this.fromDate_DateField;
            }
            set {
                this.fromDate_DateField = value;
            }
        }
        
        /// <remarks/>
        public string ToDate_Date {
            get {
                return this.toDate_DateField;
            }
            set {
                this.toDate_DateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum SMSSentTypes {
        
        /// <remarks/>
        AdvertisingReply,
        
        /// <remarks/>
        SMSClerkReply,
        
        /// <remarks/>
        CodeReaderReply,
        
        /// <remarks/>
        MatchReply,
        
        /// <remarks/>
        DivertSMS,
        
        /// <remarks/>
        UserAccountActivationSendSMS,
        
        /// <remarks/>
        UserAccountActivationReceiveSMS,
        
        /// <remarks/>
        ForgottenPasswordSMSSend,
        
        /// <remarks/>
        ParishSMSSend,
        
        /// <remarks/>
        SentToContacts,
        
        /// <remarks/>
        TicketReplySmsSend,
        
        /// <remarks/>
        SingleSMSSend,
        
        /// <remarks/>
        FinancialArticleVerificationSMS,
        
        /// <remarks/>
        CorrespondentSmsSent,
        
        /// <remarks/>
        SingleSMSSendByAdmin,
        
        /// <remarks/>
        SendOnSchedule,
        
        /// <remarks/>
        WebServiceSend,
        
        /// <remarks/>
        SmartSend,
        
        /// <remarks/>
        ContactSend,
        
        /// <remarks/>
        MobileSend,
        
        /// <remarks/>
        PanelExtensionSmsAlert,
        
        /// <remarks/>
        SendOnSchedule_Daily,
        
        /// <remarks/>
        SendOnSchedule_Weekly,
        
        /// <remarks/>
        SendOnSchedule_Monthly,
        
        /// <remarks/>
        SendOnSchedule_EveryNDays,
        
        /// <remarks/>
        UrlSend,
        
        /// <remarks/>
        SendSms2Map,
        
        /// <remarks/>
        ContactCustomerClubSend,
        
        /// <remarks/>
        SendSmsCustomerClub,
        
        /// <remarks/>
        Windows_ServiceAutomaticSend,
        
        /// <remarks/>
        InsufficientChargeAccountSend,
        
        /// <remarks/>
        FinancialArticleRegistrationSMS,
        
        /// <remarks/>
        CreateTicketSmsSend,
        
        /// <remarks/>
        DiscountCodeSend,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ScheduleSend_Weekly : ParentScheduleSend {
        
        private bool saturdayField;
        
        private bool sundayField;
        
        private bool mondayField;
        
        private bool tuesdayField;
        
        private bool wednsdayField;
        
        private bool thursdayField;
        
        private bool fridayField;
        
        /// <remarks/>
        public bool Saturday {
            get {
                return this.saturdayField;
            }
            set {
                this.saturdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Sunday {
            get {
                return this.sundayField;
            }
            set {
                this.sundayField = value;
            }
        }
        
        /// <remarks/>
        public bool Monday {
            get {
                return this.mondayField;
            }
            set {
                this.mondayField = value;
            }
        }
        
        /// <remarks/>
        public bool Tuesday {
            get {
                return this.tuesdayField;
            }
            set {
                this.tuesdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Wednsday {
            get {
                return this.wednsdayField;
            }
            set {
                this.wednsdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Thursday {
            get {
                return this.thursdayField;
            }
            set {
                this.thursdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Friday {
            get {
                return this.fridayField;
            }
            set {
                this.fridayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ScheduleSend_Daily : ParentScheduleSend {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VipSendMessageWithBachKeyCompletedEventHandler(object sender, VipSendMessageWithBachKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VipSendMessageWithBachKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VipSendMessageWithBachKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendMessageWithBachKeyCompletedEventHandler(object sender, SendMessageWithBachKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithBachKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithBachKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendMessageWithLineNumberAndBatchKeyCompletedEventHandler(object sender, SendMessageWithLineNumberAndBatchKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithLineNumberAndBatchKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithLineNumberAndBatchKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendMessageToOneCustomerClubCompletedEventHandler(object sender, SendMessageToOneCustomerClubCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageToOneCustomerClubCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageToOneCustomerClubCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendMessageWithLineNumberCompletedEventHandler(object sender, SendMessageWithLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SaveNewSchedulSendSms_DailyCompletedEventHandler(object sender, SaveNewSchedulSendSms_DailyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNewSchedulSendSms_DailyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNewSchedulSendSms_DailyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendBulkMessageToCustomersClubCompletedEventHandler(object sender, SendBulkMessageToCustomersClubCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBulkMessageToCustomersClubCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBulkMessageToCustomersClubCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendBulkMessageWithLineNumberAndBatchKeyCompletedEventHandler(object sender, SendBulkMessageWithLineNumberAndBatchKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBulkMessageWithLineNumberAndBatchKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBulkMessageWithLineNumberAndBatchKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendBulkMessageWithLineNumberCompletedEventHandler(object sender, SendBulkMessageWithLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBulkMessageWithLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBulkMessageWithLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VipSendMessagesCompletedEventHandler(object sender, VipSendMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VipSendMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VipSendMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SaveNewSchedulSendSms_WeeklyCompletedEventHandler(object sender, SaveNewSchedulSendSms_WeeklyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNewSchedulSendSms_WeeklyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNewSchedulSendSms_WeeklyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetReceivedMessageByLastMessageIDCompletedEventHandler(object sender, GetReceivedMessageByLastMessageIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceivedMessageByLastMessageIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReceivedMessageByLastMessageIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReceivedMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReceivedMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventHandler(object sender, GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReceivedMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReceivedMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetReceivedMessagesCompletedEventHandler(object sender, GetReceivedMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceivedMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReceivedMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReceivedMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReceivedMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSentMessageStatusByIDCompletedEventHandler(object sender, GetSentMessageStatusByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSentMessageStatusByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSentMessageStatusByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentSmsDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentSmsDetails)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetVipSentMessageStatusByIDCompletedEventHandler(object sender, GetVipSentMessageStatusByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVipSentMessageStatusByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVipSentMessageStatusByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentSmsDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentSmsDetails)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetVipSentMessagesCompletedEventHandler(object sender, GetVipSentMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVipSentMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVipSentMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSentMessagesCompletedEventHandler(object sender, GetSentMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSentMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSentMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUserCreditCompletedEventHandler(object sender, GetUserCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<double> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSMSLinesCompletedEventHandler(object sender, GetSMSLinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSMSLinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSMSLinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SMSLineNumber[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SMSLineNumber[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetDefualtLineNumberCompletedEventHandler(object sender, GetDefualtLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefualtLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefualtLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<int> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VipSendMessageWithLineNumberAndBatchKeyCompletedEventHandler(object sender, VipSendMessageWithLineNumberAndBatchKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VipSendMessageWithLineNumberAndBatchKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VipSendMessageWithLineNumberAndBatchKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VipSendMessageWithLineNumberCompletedEventHandler(object sender, VipSendMessageWithLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VipSendMessageWithLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VipSendMessageWithLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591